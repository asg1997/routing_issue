import 'package:dio/dio.dart';
import 'package:flutter/material.dart' show debugPrint, immutable;

/// causedError - ошибка, которая вызвала CustomException
@immutable
class CustomException implements Exception {
  CustomException({
    this.message,
    this.causedError,
    this.stack,
  }) {
    _log();
  }

  factory CustomException.fromServer(DioException e) {
    return CustomException(
      causedError: e,
      message: e.message,
      stack: e.stackTrace,
    );
  }

  factory CustomException.autoGeneratedMsg(Object causedError) {
    return CustomException(
      causedError: causedError,
      message: causedError.toString(),
    );
  }

  final String? message;
  final Object? causedError;
  final StackTrace? stack;

  Future<void> _log() async {
    if (message == null && causedError == null) return;
    if (message != null) debugPrint('Error Message: $message');
    if (causedError != null) debugPrint('Caused Error: $causedError');
  }

  @override
  String toString() {
    if (message == null && causedError == null) {
      return 'Unknonw CustomException';
    }
    return 'Error Message: $message, Caused Error: $causedError';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is CustomException &&
        other.message == message &&
        other.causedError == causedError &&
        other.stack == stack;
  }

  @override
  int get hashCode {
    return message.hashCode ^ causedError.hashCode ^ stack.hashCode;
  }
}
